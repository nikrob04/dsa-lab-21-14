import asyncio
import os
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters.command import Command
from aiogram.client.default import DefaultBotProperties
import aiohttp

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="/get_currencies"),
               KeyboardButton(text="/convert"),
               KeyboardButton(text="/manage_currency")]],
    resize_keyboard=True
)

manage_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É"),
               KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É"),
               KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")]],
    resize_keyboard=True
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ---
user_states = {}
admins = []

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ ---
async def load_admins():
    global admins
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:5003/admins") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    admins = data.get("admins", [])
                    print(f"[i] –ê–¥–º–∏–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {admins}")
                else:
                    print("[!] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω–æ–≤: {e}")

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message(Command("manage_currency"))
async def cmd_manage_currency(message: Message):
    if str(message.from_user.id) not in admins:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=manage_kb)

@dp.message(Command("get_currencies"))
async def cmd_get_currencies(message: Message):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:5002/currencies") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    if not data:
                        await message.answer("–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –ø—É—Å—Ç.")
                        return
                    text = "<b>–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç:</b>\n"
                    for item in data:
                        text += f"üîπ {item['currency_name']}: {item['rate']:.3f} RUB\n"
                    await message.answer(text)
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª—é—Ç.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

@dp.message(Command("convert"))
async def cmd_convert(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    user_states[message.from_user.id] = "waiting_for_currency_to_convert"

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ ---
@dp.message()
async def handle_all(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if text == "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É":
        if str(user_id) not in admins:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
        user_states[user_id] = "waiting_for_currency_name"
        return

    elif text == "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É":
        if str(user_id) not in admins:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
        user_states[user_id] = "waiting_for_currency_to_delete"
        return

    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã":
        if str(user_id) not in admins:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
        user_states[user_id] = "waiting_for_currency_to_edit"
        return

    elif user_states.get(user_id) == "waiting_for_currency_name":
        user_states[user_id] = {"action": "add_currency", "currency": text.upper()}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –∫ —Ä—É–±–ª—é:")
        return

    elif isinstance(user_states.get(user_id), dict) and user_states[user_id].get("action") == "add_currency":
        try:
            rate = float(text.replace(",", "."))
            currency = user_states[user_id]["currency"]
            async with aiohttp.ClientSession() as session:
                async with session.post("http://localhost:5001/load", json={"currency_name": currency, "rate": rate}) as resp:
                    if resp.status == 200:
                        await message.answer(f"–í–∞–ª—é—Ç–∞ {currency} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.", reply_markup=main_kb)
                    elif resp.status == 409:
                        await message.answer("–î–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=main_kb)
                    else:
                        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã.", reply_markup=main_kb)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        finally:
            user_states.pop(user_id)
        return

    elif user_states.get(user_id) == "waiting_for_currency_to_delete":
        currency = text.upper()
        async with aiohttp.ClientSession() as session:
            async with session.post("http://localhost:5001/delete", json={"currency_name": currency}) as resp:
                if resp.status == 200:
                    await message.answer(f"–í–∞–ª—é—Ç–∞ {currency} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_kb)
                elif resp.status == 404:
                    await message.answer("–¢–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_kb)
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã.", reply_markup=main_kb)
        user_states.pop(user_id)
        return

    elif user_states.get(user_id) == "waiting_for_currency_to_edit":
        user_states[user_id] = {"action": "edit_currency", "currency": text.upper()}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å:")
        return

    elif isinstance(user_states.get(user_id), dict) and user_states[user_id].get("action") == "edit_currency":
        try:
            rate = float(text.replace(",", "."))
            currency = user_states[user_id]["currency"]
            async with aiohttp.ClientSession() as session:
                async with session.post("http://localhost:5001/update_currency", json={"currency_name": currency, "rate": rate}) as resp:
                    if resp.status == 200:
                        await message.answer(f"–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã {currency} –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=main_kb)
                    elif resp.status == 404:
                        await message.answer("–¢–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_kb)
                    else:
                        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.", reply_markup=main_kb)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        finally:
            user_states.pop(user_id)
        return

    elif isinstance(user_states.get(user_id), dict) and user_states[user_id].get("action") == "convert":
        try:
            amount = float(text.replace(",", "."))
            currency = user_states[user_id]["currency"]
            async with aiohttp.ClientSession() as session:
                async with session.get(f"http://localhost:5002/convert?currency_name={currency}&amount={amount}") as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        rub = result["converted_to_rub"]
                        await message.answer(f"{amount:.3f} {currency} = {rub:.3f} RUB", reply_markup=main_kb)
                    elif resp.status == 404:
                        await message.answer("–¢–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_kb)
                    else:
                        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.", reply_markup=main_kb)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        finally:
            user_states.pop(user_id)
        return

    elif user_states.get(user_id) == "waiting_for_currency_to_convert":
        user_states[user_id] = {"action": "convert", "currency": text.upper()}
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        return

    else:
        await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.", reply_markup=main_kb)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await load_admins()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
