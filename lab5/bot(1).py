import asyncio
import logging
import psycopg2
import os
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters.command import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton



# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")


#admins = ["851591473"]



# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    try:
        conn = psycopg2.connect(
            host="localhost",
            dbname="currency_bot_db",
            user="postgres",
            password="postgres"
        )
        return conn
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# —Å–ø–∏—Å–æ–∫ chat_id –∞–¥–º–∏–Ω–æ–≤
#admins = ["851591471"]

admins = []

def load_admins():
    global admins
    conn = get_db_connection()
    if conn is None:
        print("[!] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã.")
        return
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id FROM admins")
    result = cursor.fetchall()
    cursor.close()
    conn.close()

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º chat_id –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
    admins = [str(row[0]) for row in result]
    print(f"[i] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(admins)} –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã.")


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_main_kb = ReplyKeyboardMarkup(
    keyboard=[[
        KeyboardButton(text="/start"),
        KeyboardButton(text="/manage_currency"),
        KeyboardButton(text="/get_currencies"),
        KeyboardButton(text="/convert")
    ]],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_main_kb = ReplyKeyboardMarkup(
    keyboard=[[
        KeyboardButton(text="/start"),
        KeyboardButton(text="/get_currencies"),
        KeyboardButton(text="/convert")
    ]],
    resize_keyboard=True
)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–æ–π
manage_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É"),
            KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É"),
            KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã")
        ]
    ],
    resize_keyboard=True
)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    if str(message.from_user.id) in admins:
        await message.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=admin_main_kb)
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=user_main_kb)




# –ö–æ–º–∞–Ω–¥–∞ /manage_currency
@dp.message(Command("manage_currency"))
async def cmd_manage_currency(message: Message):
    if str(message.from_user.id) not in admins:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=manage_kb)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

@dp.message(Command("get_currencies"))
async def cmd_get_currencies(message: Message):
    conn = get_db_connection()
    if conn is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    cursor = conn.cursor()
    cursor.execute("SELECT currency_name, rate FROM currencies ORDER BY currency_name")
    currencies = cursor.fetchall()
    cursor.close()
    conn.close()

    if not currencies:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç.")
    else:
        text = "<b>–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –∏ –∏—Ö –∫—É—Ä—Å–æ–≤ –∫ —Ä—É–±–ª—é:</b>\n"
        for name, rate in currencies:
            text += f"üîπ {name}: {rate:.3f} RUB\n"
        await message.answer(text)


@dp.message(Command("convert"))
async def cmd_convert(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
    user_states[message.from_user.id] = "waiting_for_currency_to_convert"


@dp.message()
async def handle_all_messages(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    if text == "–î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã:")
        user_states[user_id] = "waiting_for_currency_name"

    elif text == "–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        user_states[user_id] = "waiting_for_currency_to_delete"

    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞:")
        user_states[user_id] = "waiting_for_currency_to_edit"

    # --- –†–∞–±–æ—Ç–∞ —Å–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ---
    elif user_states.get(user_id) == "waiting_for_currency_name":
        currency_name = text.upper()
        conn = get_db_connection()
        if conn is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM currencies WHERE currency_name = %s", (currency_name,))
        existing = cursor.fetchone()
        cursor.close()
        conn.close()

        if existing:
            await message.answer("–¢–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            user_states.pop(user_id)
        else:
            user_states[user_id] = {"action": "add_currency", "currency_name": currency_name}
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∫ —Ä—É–±–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 94.5):")

    elif isinstance(user_states.get(user_id), dict) and user_states[user_id].get("action") == "add_currency":
        try:
            rate = round(float(text.replace(",", ".")), 3)
            if rate <= 0:
                await message.answer("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                return
            currency_name = user_states[user_id]["currency_name"]

            conn = get_db_connection()
            if conn is None:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO currencies (currency_name, rate) VALUES (%s, %s)",
                (currency_name, rate)
            )
            conn.commit()
            cursor.close()
            conn.close()

            await message.answer(f"–í–∞–ª—é—Ç–∞ {currency_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∫—É—Ä—Å–æ–º {rate} RUB.")
            user_states.pop(user_id)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫—É—Ä—Å–∞!")

    elif user_states.get(user_id) == "waiting_for_currency_to_delete":
        currency_name = text.upper()
        conn = get_db_connection()
        if conn is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        cursor = conn.cursor()
        cursor.execute("DELETE FROM currencies WHERE currency_name = %s", (currency_name,))
        conn.commit()
        deleted = cursor.rowcount
        cursor.close()
        conn.close()

        if deleted:
            await message.answer(f"–í–∞–ª—é—Ç–∞ {currency_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.answer("–¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ.")
        user_states.pop(user_id)

    elif user_states.get(user_id) == "waiting_for_currency_to_edit":
        currency_name = text.upper()
        conn = get_db_connection()
        if conn is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM currencies WHERE currency_name = %s", (currency_name,))
        existing = cursor.fetchone()
        cursor.close()
        conn.close()

        if existing:
            user_states[user_id] = {"action": "edit_currency", "currency_name": currency_name}
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã:")
        else:
            await message.answer("–¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            user_states.pop(user_id)

    elif isinstance(user_states.get(user_id), dict) and user_states[user_id].get("action") == "edit_currency":
        try:
            new_rate = round(float(text.replace(",", ".")), 3)
            if new_rate <= 0:
                await message.answer("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                return
            currency_name = user_states[user_id]["currency_name"]

            conn = get_db_connection()
            if conn is None:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE currencies SET rate = %s WHERE currency_name = %s",
                (new_rate, currency_name)
            )
            conn.commit()
            cursor.close()
            conn.close()

            await message.answer(f"–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã {currency_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_rate} RUB.")
            user_states.pop(user_id)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞!")

    elif user_states.get(user_id) == "waiting_for_currency_to_convert":
        currency_name = text.upper()
        conn = get_db_connection()
        if conn is None:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        cursor = conn.cursor()
        cursor.execute("SELECT rate FROM currencies WHERE currency_name = %s", (currency_name,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()

        if result:
            rate = result[0]
            user_states[user_id] = {"action": "convert", "currency": currency_name, "rate": rate}
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        else:
            await message.answer("–¢–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            user_states.pop(user_id)

    elif isinstance(user_states.get(user_id), dict) and user_states[user_id].get("action") == "convert":
        try:
            amount = float(text.replace(",", "."))
            if amount <= 0:
                await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
                return

            currency = user_states[user_id]["currency"]
            rate = float(user_states[user_id]["rate"])
            result = round(amount * rate, 3)

            await message.answer(f"{amount:.3f} {currency} = {result:.3f} RUB")
            user_states.pop(user_id)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    else:
        await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ /manage_currency –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    load_admins()  # üëà –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())