import asyncio
import logging
import psycopg2
import os
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.filters.command import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
import aiohttp


class AddOperation(StatesGroup):
    choosing_type = State()
    entering_sum = State()
    entering_date = State()


class Register(StatesGroup):
    waiting_for_login = State()

class ViewOperations(StatesGroup):
    waiting_for_currency = State()

class DeleteUser(StatesGroup):
    waiting_for_chat_id = State()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

operation_type_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–û–•–û–î"), KeyboardButton(text="–†–ê–°–•–û–î")]
    ],
    resize_keyboard=True
)
currency_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="RUB"), KeyboardButton(text="USD"), KeyboardButton(text="EUR")]
    ],
    resize_keyboard=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return psycopg2.connect(
        dbname="finance_bot_db",
        user="postgres",
        password="postgres",
        host="localhost",
        port="5432"
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É—á—ë—Ç –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤.")

@dp.message(Command("reg"))
async def cmd_register(message: Message, state: FSMContext):
    conn = get_db_connection()
    cursor = conn.cursor()

    chat_id = message.chat.id
    cursor.execute("SELECT * FROM users WHERE chat_id = %s", (chat_id,))
    user = cursor.fetchone()

    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
        await state.set_state(Register.waiting_for_login)

    cursor.close()
    conn.close()

@dp.message(Register.waiting_for_login)
async def process_login(message: Message, state: FSMContext):
    login = message.text.strip()
    chat_id = message.chat.id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (chat_id, name, is_admin) VALUES (%s, %s, %s)",
        (chat_id, login, False)
    )
    conn.commit()
    cursor.close()
    conn.close()

    await state.clear()
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {login}!")


@dp.message(Command("add_operation"))
async def add_operation_start(message: Message, state: FSMContext):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE chat_id = %s", (chat_id,))
    user = cursor.fetchone()
    cursor.close()
    conn.close()

    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reg.")
        return

    await state.set_state(AddOperation.choosing_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=operation_type_kb)

@dp.message(AddOperation.choosing_type)
async def process_type(message: Message, state: FSMContext):
    if message.text not in ["–î–û–•–û–î", "–†–ê–°–•–û–î"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –î–û–•–û–î –∏–ª–∏ –†–ê–°–•–û–î.")
        return

    await state.update_data(type=message.text)
    await state.set_state(AddOperation.entering_sum)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö:", reply_markup=ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True))


@dp.message(AddOperation.entering_sum)
async def process_sum(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö.")
        return

    await state.update_data(sum=amount)
    await state.set_state(AddOperation.entering_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-03-01):")

@dp.message(AddOperation.entering_date)
async def process_date(message: Message, state: FSMContext):
    user_input = message.text.strip()

    # –í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
    possible_formats = ["%d-%m-%Y", "%d.%m.%Y", "%d-%m-%y", "%d.%m.%y"]

    for fmt in possible_formats:
        try:
            parsed_date = datetime.strptime(user_input, fmt).date()
            break
        except ValueError:
            continue
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥, –¥–¥.–º–º.–≥–≥–≥–≥, –¥–¥-–º–º-–≥–≥ –∏–ª–∏ –¥–¥.–º–º.–≥–≥")
        return

    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO operations (date, sum, chat_id, type_operation) VALUES (%s, %s, %s, %s)",
        (parsed_date, data['sum'], message.chat.id, data['type'])
    )
    conn.commit()
    cursor.close()
    conn.close()

    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ")

@dp.message(Command("operations"))
async def cmd_operations(message: Message, state: FSMContext):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE chat_id = %s", (chat_id,))
    user = cursor.fetchone()
    cursor.close()
    conn.close()

    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reg.")
        return

    await state.set_state(ViewOperations.waiting_for_currency)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:", reply_markup=currency_kb)

@dp.message(ViewOperations.waiting_for_currency)
async def process_currency_choice(message: Message, state: FSMContext):
    currency = message.text.upper()
    if currency not in ["RUB", "USD", "EUR"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç: RUB, USD –∏–ª–∏ EUR.")
        return

    chat_id = message.chat.id
    rate = 1.0  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB

    # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫—É—Ä—Å —É –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    if currency in ["USD", "EUR"]:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"http://127.0.0.1:8000/rate?currency={currency}") as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        rate = float(data["rate"])
                    elif resp.status == 400:
                        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ (UNKNOWN CURRENCY).")
                        await state.clear()
                        return
                    else:
                        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ (500).")
                        await state.clear()
                        return
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É: {e}")
            await state.clear()
            return
            
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT date, sum, type_operation FROM operations WHERE chat_id = %s ORDER BY date DESC",
        (chat_id,)
    )
    operations = cursor.fetchall()
    cursor.close()
    conn.close()

    if not operations:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.")
        await state.clear()
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    response = f"<b>–í–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ {currency}:</b>\n"
    for date, amount, op_type in operations:
        converted = round(float(amount) / rate, 2)
        response += f"üìÖ {date} | üí∞ {converted:.2f} {currency} | üìå {op_type}\n"

    await state.clear()
    await message.answer(response, reply_markup=None)

@dp.message(Command("adeluser"))
async def cmd_deluser(message: Message, state: FSMContext):
    chat_id = message.chat.id

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT is_admin FROM users WHERE chat_id = %s", (chat_id,))
    user = cursor.fetchone()
    cursor.close()
    conn.close()

    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    if not user[0]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await state.set_state(DeleteUser.waiting_for_chat_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (chat_id) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")

@dp.message(DeleteUser.waiting_for_chat_id)
async def process_deluser(message: Message, state: FSMContext):
    target_chat_id = message.text.strip()

    if not target_chat_id.isdigit():
        await message.answer("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users WHERE chat_id = %s", (target_chat_id,))
    user = cursor.fetchone()

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º chat_id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        cursor.close()
        conn.close()
        await state.clear()
        return

    # –£–¥–∞–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("DELETE FROM operations WHERE chat_id = %s", (target_chat_id,))
    cursor.execute("DELETE FROM users WHERE chat_id = %s", (target_chat_id,))
    conn.commit()
    cursor.close()
    conn.close()

    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id {target_chat_id} –∏ –≤—Å–µ –µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã ‚úÖ")
    await state.clear()


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
